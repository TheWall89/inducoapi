#!/usr/bin/env python3

#  Copyright 2020 Matteo Pergolesi <matpergo [at] gmail [dot] com>
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
import argparse
import json
from json import JSONDecodeError
from typing import Dict, Tuple, Any, Union, List, Optional

import yaml
from openapi3 import OpenAPI

default_mediatype = "application/json"
default_example = True


class _NoAliasDumper(yaml.Dumper):
    def ignore_aliases(self, data):
        return True


def _get_type_ex(val: Any, example: bool = True) -> Tuple[str, Any]:
    ex = val
    if val is None:
        # If no value is provided, assume string
        t = "string"
        ex = ""
    elif isinstance(val, str):
        t = "string"
    elif isinstance(val, int):
        t = "integer"
    elif isinstance(val, float):
        t = "number"
    elif isinstance(val, bool):
        t = "boolean"
    else:
        t = ""
        print("Unknown type: {}, value: {}".format(type(val), val))

    if example:
        return {"type": t, "example": ex}
    else:
        return {"type": t}


def _gen_schema(data: Union[Dict, List], example: bool = True) -> Dict:
    if isinstance(data, dict):
        schema = {
            "type": "object",
            "properties": {}
        }
        for key, val in data.items():
            schema["properties"][key] = _gen_schema(val, example)
    elif isinstance(data, list):
        schema = {
            "type": "array",
            "items": {}
        }
        if data:
            schema["items"] = _gen_schema(data[0], example)
    else:
        schema = _get_type_ex(data, example)
    return schema


def _load_file(file: str) -> Optional[Dict]:
    with open(file) as f:
        try:
            return json.load(f)
        except JSONDecodeError:
            f.seek(0)
            try:
                return yaml.safe_load(f)
            except yaml.YAMLError:
                return None


def _write_output(oapi: Dict, output: str) -> None:
    dump_kwds = {"indent": 2, "Dumper": _NoAliasDumper, "sort_keys": False}
    if output:
        with open(output, "w") as o:
            yaml.dump(oapi, o, **dump_kwds)
            print("Output written to {}".format(output))
    else:
        print(yaml.dump(oapi, **dump_kwds))


def _get_parser():
    descr = "A simple python program to generate OpenApi documentation by " \
            "supplying request/response bodies"
    fmt = argparse.ArgumentDefaultsHelpFormatter
    usage = "%(prog)s METHOD PATH CODE [options]"
    p = argparse.ArgumentParser("inducoapi.py", description=descr,
                                usage=usage, formatter_class=fmt)
    p.add_argument("method", type=str,
                   choices=["GET", "POST", "PUT", "PATCH", "DELETE"],
                   metavar="METHOD",
                   help="HTTP request method")
    p.add_argument("path", type=str, metavar="PATH",
                   help="URI path")
    p.add_argument("resp_code", type=int, metavar="CODE",
                   help="HTTP response code")
    p.add_argument("-req", "--request", type=str, metavar="PATH",
                   help="Path to file containing request body")
    p.add_argument("-resp", "--response", type=str, metavar="PATH",
                   help="Path to file containing response body")
    p.add_argument("-o", "--output", type=str, metavar="PATH",
                   help="Path to output file")
    p.add_argument("-mt", "--media-type", type=str, metavar="STR",
                   default=default_mediatype,
                   help="Desired media type to be used")
    p.add_argument("-ne", "--no-example", action="store_false", dest="example",
                   default=default_example,
                   help="Do not generate schema examples")
    return p


def build_openapi(method: str, path: str, resp_code: int, request: str = None,
                  response: str = None, media_type: str = default_mediatype,
                  example: bool = default_example) -> Dict:
    oapi = {
        "openapi": "3.0.0",
        "info": {
            "title": "Generated by InducOapi",
            "version": "v1",
        },
        "paths": {
            path: {
                method.lower(): {
                    "requestBody": None,
                    "responses": {
                        resp_code: {
                            "description": "",
                        }
                    }
                }
            }
        }
    }

    if request:
        request_load = _load_file(request)
        if request_load:
            oapi["paths"][path][method.lower()]["requestBody"] = {
                "content": {
                    media_type: {
                        "schema": _gen_schema(request_load, example)
                    }
                }
            }
        else:
            print("Warning: {} looks not valid, skip request generation".
                  format(request))
    else:
        del oapi["paths"][path][method.lower()]["requestBody"]

    if response:
        response_load = _load_file(response)
        if response_load:
            oapi["paths"][path][method.lower()]["responses"][
                resp_code]["content"] = {
                media_type: {
                    "schema": _gen_schema(response_load, example)
                }
            }
        else:
            print("Warning: {} looks not valid, skip response generation".
                  format(response))

    # Validate
    OpenAPI(oapi)

    return oapi
