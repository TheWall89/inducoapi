#!/usr/bin/env python3

#  Copyright 2020 Matteo Pergolesi <matpergo [at] gmail [dot] com>
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
from typing import Dict, Tuple, Any, Union, List

from openapi3 import OpenAPI


def _get_type_ex(val: Any, example: bool = True) -> Tuple[str, Any]:
    ex = val
    if val is None:
        # If no value is provided, assume string
        t = "string"
        ex = ""
    elif isinstance(val, str):
        t = "string"
    elif isinstance(val, int):
        t = "integer"
    elif isinstance(val, float):
        t = "number"
    elif isinstance(val, bool):
        t = "boolean"
    else:
        t = ""
        print(f"Unknown type: {type(val)}, value: {val}")

    if example:
        return {"type": t, "example": ex}
    else:
        return {"type": t}


def _gen_schema(data: Union[Dict, List], example: bool = True) -> Dict:
    if isinstance(data, dict):
        schema = {
            "type": "object",
            "properties": {}
        }
        for key, val in data.items():
            schema["properties"][key] = _gen_schema(val, example)
    elif isinstance(data, list):
        schema = {
            "type": "array",
            "items": {}
        }
        if data:
            schema["items"] = _gen_schema(data[0], example)
    else:
        schema = _get_type_ex(data, example)
    return schema


def build_openapi(method: str, path: str, resp_code: int,
                  request: Dict = None, response: Dict = None,
                  media_type: str = "application/json",
                  example: bool = True) -> Dict:
    oapi = {
        "openapi": "3.0.0",
        "info": {
            "title": "Generated by InducOapi",
            "version": "v1",
        },
        "paths": {
            path: {
                method.lower(): {
                    "requestBody": None,
                    "responses": {
                        resp_code: {
                            "description": "",
                        }
                    }
                }
            }
        }
    }

    if request:
        oapi["paths"][path][method.lower()]["requestBody"] = {
            "content": {
                media_type: {
                    "schema": _gen_schema(request, example)
                }
            }
        }
    else:
        del oapi["paths"][path][method.lower()]["requestBody"]

    if response:
        oapi["paths"][path][method.lower()]["responses"][
            resp_code]["content"] = {
            media_type: {
                "schema": _gen_schema(response, example)
            }
        }

    # Validate
    OpenAPI(oapi)

    return oapi
